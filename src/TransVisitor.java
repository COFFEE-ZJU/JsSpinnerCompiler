/*** * Excerpted from "The Definitive ANTLR 4 Reference", * published by The Pragmatic Bookshelf. * Copyrights apply to this code. It may not be used to create training material,  * courses, books, articles, and the like. Contact us if you are in doubt. * We make no guarantees that this code is fit for any purpose.  * Visit http://www.pragmaticprogrammer.com/titles/tpantlr2 for more book information.***/import java.util.HashMap;import java.util.Map;import com.google.gson.Gson;import com.google.gson.JsonObject;public class TransVisitor extends JaqlSampleBaseVisitor<Integer> {    /** "memory" for our calculator; variable/value pairs go here */	class JsonQueryTree{		String type = null;		JsonQueryTree input = null;		JsonQueryTree left_input = null;		JsonQueryTree right_input = null;		String projection_attibute_set = null;		String selection_condition = null;		String left_join_attribute = null;		String right_join_attribute = null;		String windowsize = null;		String stream_source = null;			}		public enum DataType {STREAM,RELATION};	public enum OperationType {JOIN, FILTER, TRANS, GROUP, STREAM, WINDOW, NULL};	    private String result;    private boolean haveRename;    private String renameId;    private String condition = null;    private String condVar = null;    private OperationType currentOp = OperationType.NULL;    private Map<String, DataType> idTypeMap = new HashMap<String, DataType>();    private Map<String, JsonQueryTree> idValueMap = new HashMap<String, JsonQueryTree>();    private JsonQueryTree currentTree = null;        private String[] joinId = new String[2];    private String[] joinIdRename = new String[2];        private void init(){    	result = null;    	haveRename = false;    	renameId = null;    	condition = null;    	condVar = null;    	currentOp = OperationType.NULL;    	//idTypeMap.clear();    	//idValueMap.clear();    	currentTree = null;    	joinId[0] = joinId[1] = null;    	joinIdRename[0] = joinIdRename[1] = null;    }        @Override    public Integer visitAssignView(JaqlSampleParser.AssignViewContext ctx) {    	String idName = ctx.ID().getText();    	visitPipe(ctx.pipe());    	assert(currentTree != null);    	if(currentTree.type == "istream" || currentTree.type == "dstream" || currentTree.type == "rstream"){    		idTypeMap.put(idName, DataType.STREAM);    	}    	else idTypeMap.put(idName, DataType.RELATION);    	    	idValueMap.put(idName, currentTree);    	return 0;    }        @Override    public Integer visitReadStream(JaqlSampleParser.ReadStreamContext ctx) {     	String idName = ctx.ID(0).getText();    	JsonQueryTree tmpTree = new JsonQueryTree();    	tmpTree.type = "leaf";    	tmpTree.stream_source = ctx.ID(1).getText();    	idTypeMap.put(idName, DataType.STREAM);    	idValueMap.put(idName, tmpTree);    	return 0;    }        @Override public Integer visitJoin(JaqlSampleParser.JoinContext ctx) {     	currentOp = OperationType.JOIN;    	assert(currentTree == null);    	currentTree = new JsonQueryTree();    	currentTree.type = "join";    	if(ctx.joinVar(0).ID().size() == 2){    		joinIdRename[0] = ctx.joinVar(0).ID(0).getText();    		joinId[0] = ctx.joinVar(0).ID(1).getText();    	}    	else{    		joinIdRename[0] = null;    		joinId[0] = ctx.joinVar(0).ID(0).getText();    	}    	    	if(ctx.joinVar(1).ID().size() == 2){    		joinIdRename[1] = ctx.joinVar(1).ID(0).getText();    		joinId[1] = ctx.joinVar(1).ID(1).getText();    	}    	else{    		joinIdRename[1] = null;    		joinId[1] = ctx.joinVar(1).ID(0).getText();    	}    	    	if(idTypeMap.get(joinId[0]) != DataType.RELATION ||     			idTypeMap.get(joinId[1]) != DataType.RELATION){    		System.out.println("join input type wrong!");    		assert(false);    	}    	currentTree.left_input = idValueMap.get(joinId[0]);    	currentTree.right_input = idValueMap.get(joinId[1]);    	    	return visitChildren(ctx);     	    }        @Override     public Integer visitConditions(JaqlSampleParser.ConditionsContext ctx) {     	switch (currentOp) {		case JOIN:			if(ctx.conditions2().size() != 1){				System.out.println("no multiple conditions allowed in join");				assert(false);			}			break;			//TODO		default:			break;		}    	return visitChildren(ctx);     }        @Override     public Integer visitConditions2(JaqlSampleParser.Conditions2Context ctx) {     	switch (currentOp) {		case JOIN:			if(ctx.condition().size() != 1){				System.out.println("no multiple conditions allowed in join");				assert(false);			}			break;			//TODO		default:			break;		}    	return visitChildren(ctx);     }        @Override     public Integer visitCondition(JaqlSampleParser.ConditionContext ctx) {     	if(ctx.conditions() != null) return visitChildren(ctx);    	    	visitChildren(ctx);    	switch(currentOp){    	case JOIN:    		if(ctx.comprator() == null || ! ctx.comprator().getText().equals("==")){    			System.out.println("wrong condition type");    			assert(false);    		}	    	break;	    	    	//TODO	    	    	default:			break;    	}    	    	return 0;    }    @Override     public Integer visitVar(JaqlSampleParser.VarContext ctx) {     	switch (currentOp) {		case JOIN:			assert(ctx.ID().size() == 2);			int idPos = checkJoinId(ctx.ID(0).getText());			assert(idPos != -1);			if(idPos == 0) currentTree.left_join_attribute = ctx.ID(1).getText();			else currentTree.right_join_attribute = ctx.ID(1).getText();			break;			//TODO		default:			break;		}    	return visitChildren(ctx);     }    /** ID '=' expr NEWLINE */    @Override    public Integer visitStat(JaqlSampleParser.StatContext ctx){    	init();    	    	if(ctx.pipe() != null) visitPipe(ctx.pipe());    	else if(ctx.join() != null) visitJoin(ctx.join());    	    	Gson gson = new Gson();    	System.out.println(gson.toJson(currentTree));    	return 0;    }        @Override    public Integer visitFilterLabel(JaqlSampleParser.FilterLabelContext ctx) {        haveRename = false;        if(ctx.ID() != null){        	haveRename = true;        	renameId = ctx.ID().getText();        }        JsonObject jo = new JsonObject();        return 0;    }        private int checkJoinId(String id){    	boolean res0,res1;    	if(joinIdRename[0]!=null) res0 = id.equals(joinIdRename[0]);    	else res0 = id.equals(joinId[0]);    	    	if(joinIdRename[1]!=null) res1 = id.equals(joinIdRename[1]);    	else res1 = id.equals(joinId[1]);    	    	if(res0 && !res1) return 0;    	else if(!res0 && res1) return 1;    	else if(!res0 && !res1) System.out.println("wrong id name");    	else System.out.println("duplicated id names");    	    	return -1;    }}